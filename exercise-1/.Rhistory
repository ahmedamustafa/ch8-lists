# write a script
# write a script
hours_in_a_week <- 24 * 7
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 3
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Aden"
# Assign your name to the variable `my_name`
my_name <- "Mustafa"
# Assign your height (in inches) to a variable `my_height`
my_height <- 5.6
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 250
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- 1000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 3
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Aden"
# Assign your name to the variable `my_name`
my_name <- "Mustafa"
# Assign your height (in inches) to a variable `my_height`
my_height <- 5.6
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 250
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- 1000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost < 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 3
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Aden"
# Assign your name to the variable `my_name`
my_name <- "Mustafa"
# Assign your height (in inches) to a variable `my_height`
my_height <- 5.6
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 250
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Aden"
# Assign your name to the variable `my_name`
my_name <- "Mustafa"
# Assign your height (in inches) to a variable `my_height`
my_height <- 5.6
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 250
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Aden"
# Assign your name to the variable `my_name`
my_name <- "Mustafa"
# Assign your height (in inches) to a variable `my_height`
my_height <- 5.6
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 250
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
floor(1000 / puppy_price)
too_expensive <- total_cost > 1000
too_expensive <- total_cost > 1000
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Aden"
# Assign your name to the variable `my_name`
my_name <- "Mustafa"
# Assign your height (in inches) to a variable `my_height`
my_height <- 75
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 250
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000 / puppy_price)
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Aden"
# Assign your name to the variable `my_name`
my_name <- "Mustafa"
# Assign your height (in inches) to a variable `my_height`
my_height <- 75
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 13
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 250
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000 / puppy_price)
install.packages(styler)
install.packages(lntr)
installed.packages(styler)
install.packages("styler")
library("styler", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("lintr")
library("lintr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
styler:::style_active_file()
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
# Create a numeric variable `my_age` that is equal to your age
my_age <- 21
# Create a variable `my_name` that is equal to your first name
my_name <- "Mustafa"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 * 365
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function (name, age) {
sentence <- paste("Hello, my name is ", name, "and I'm ", age, " years old.")
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is ", "Hey, I'm ", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, pattern = "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function (value) {
value * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_day <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function (value) {
value ^ 3
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Fast and Furious 6", "Get Out", "Bad Boys", "Taken", "The Transporter", "Parker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1:3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
# Create a vector `numbers` that is the numbers 700 through 999
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
# Create a vector `lower_numbers` that is the numbers 500:699
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
install.packages("lintr")
library("lintr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("styler", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Eggs", "Toast", "Banana", "Apple")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Rice", "Fish", "Water")
# Create a list `meals` that has contains your breakfast and lunch
meals <- my_breakfast + my_lunch
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Eggs", "Toast", "Banana", "Apple")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Rice", "Fish", "Water")
# Create a list `meals` that has contains your breakfast and lunch
meals <- my_breakfast + my_lunch
meals <- my_breakfast + my_lunch
meals <- paste(my_breakfast + my_lunch)
meals <- paste(my_breakfast)
meals <- paste(my_breakfast + my_lunch))
meals <- paste(my_breakfast + my_lunch)
meals <- paste(my_breakfast + my_lunch)
meals <- list(my_breakfast,  my_lunch)
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Eggs", "Toast", "Banana", "Apple")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Rice", "Fish", "Water")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Eggs", "Toast", "Banana", "Apple")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Rice", "Fish", "Water")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
View(meals)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Eggs", "Toast", "Banana", "Apple")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Rice", "Fish", "Water")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals [[dinner]] < c("Fruits")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
View(meals)
View(meals)
meals [[dinner]] < c("Fruits")
meals [[dinner]] <- c("Fruits")
meals$dinner <- c("Fruits")
View(meals)
View(meals)
View(meals)
View(meals)
View(meals)
dinner <- meals$dinner
View(meals)
meals$dinner <- c("Fruits")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
View(meals)
View(meals)
meals[[5]] <- meals[["lunch"]]
meals[[5]] <- meals[["lunch"]]
View(meals)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Eggs", "Toast", "Banana", "Apple")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Rice", "Fish", "Water")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("Fruits")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast", "lunch"]
lintr :: lint("exercise.R")
setwd("~/Desktop/Class_Exercise/ch8-lists/exercise-1")
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("toast", "eggs", "tea")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("soup", "pb + j")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("curry", "rice")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
View(early_meals)
View(meals)
View(early_meals)
View(meals)
View(early_meals)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("toast", "eggs", "tea")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("soup", "pb + j")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("curry", "rice")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
View(meals)
View(early_meals)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Eggs", "Toast", "Banana", "Apple")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Rice", "Fish", "Water")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("Fruits")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1 : 2 ]
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
View(meals)
items <- lapply(meals, length)
View(items)
items
add_pizza <- function(meal)
meal <- c(meal, "pizza")
meal
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Eggs", "Toast", "Banana", "Apple")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Rice", "Fish", "Water")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("Fruits")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1 : 2 ]
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items <- lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meals)
meals <- c(meal, "pizza")
meals
# Create a vector `better_meals` that is all your meals, but with pizza!
